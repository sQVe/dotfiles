{
  "apolloUseMutation": {
    "prefix": "useMutation",
    "body": ["const [${1:mutationName}, {loading}] = use$0Mutation();"]
  },
  "apolloUseQuery": {
    "prefix": "useQuery",
    "body": ["const { data, loading } = use$0Query();"]
  },
  "reducer": {
    "prefix": "reducer",
    "body": [
      "const reducer = (state, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase 'actionType':",
      "\t\t\treturn {$0};",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};"
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": "const ${1:callback} = useCallback(() => $2, [${0}]);"
  },
  "useContext": {
    "prefix": "useContext",
    "body": "const ${1:context} = useContext($0);"
  },
  "useDebugValue": { "prefix": "useDebugValue", "body": "useDebugValue($0)" },
  "useEffect": {
    "prefix": "useEffect",
    "body": ["useEffect(() => {", "\t$1", "}, [${0}]);"]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": ["useImperitiveHandle((${1:ref}) => () => $0);"]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": "const ${1:value} = useMemo(() => $2), [${0}]);"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${0:initialState});"
  },
  "useRef": {
    "prefix": "useRef",
    "body": "const ${1:ref} = useRef(${0:initialValue});"
  },
  "useState": {
    "prefix": "useState",
    "body": "const [${1:state}, set${2:State}] = useState(${0:initialState});"
  }
}
