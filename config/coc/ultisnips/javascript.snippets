extends 30secondsofcode, react

#  ┏━╸┏━┓┏┳┓┏┳┓┏━╸┏┓╻╺┳╸
#  ┃  ┃ ┃┃┃┃┃┃┃┣╸ ┃┗┫ ┃
#  ┗━╸┗━┛╹ ╹╹ ╹┗━╸╹ ╹ ╹

snippet #! "Shebang" b
#!/usr/bin/env node
endsnippet

snippet ** "JsDoc Comment" b
/**
 * ${VISUAL}$0
 */
endsnippet

snippet **! "Compact JsDoc Comment" b
/** ${VISUAL}$0 */
endsnippet

#  ┏━╸┏━┓┏┓╻┏━┓┏━┓╻  ┏━╸
#  ┃  ┃ ┃┃┗┫┗━┓┃ ┃┃  ┣╸
#  ┗━╸┗━┛╹ ╹┗━┛┗━┛┗━╸┗━╸

snippet cc "Console clear" w
console.clear()
endsnippet

snippet ce "Console error" w
console.error($1)
endsnippet

snippet cec "Console error with context" w
console.error('`!v expand("%:t")`:`!v line(".")` ==>'', $1)
endsnippet

snippet cg "Console group" w
console.group()
console.groupEnd()
endsnippet

snippet cg "Console collapsed group" w
console.groupCollapsed()
console.groupEnd()
endsnippet

snippet cl "Console log" w
console.log($1)
endsnippet

snippet clc "Console log with context" w
console.log('`!v expand("%:t")`:`!v line(".")` ==>', $1)
endsnippet

snippet ci "Console info" w
console.info($1)
endsnippet

snippet cic "Console info with context" w
console.info('`!v expand("%:t")`:`!v line(".")`' ==>', $1)
endsnippet

snippet ct "Console table" w
console.table($1)
endsnippet

snippet cw "Console warn" w
console.warn($1)
endsnippet

snippet cwc "Console warn with context" w
console.warn('`!v expand("%:t")`:`!v line(".")` ==>'', $1)
endsnippet

#  ╺┳┓╻┏━┓┏━┓┏┓ ╻  ┏━╸   ┏━╸┏━┓╻  ╻┏┓╻╺┳╸
#   ┃┃┃┗━┓┣━┫┣┻┓┃  ┣╸    ┣╸ ┗━┓┃  ┃┃┗┫ ┃
#  ╺┻┛╹┗━┛╹ ╹┗━┛┗━╸┗━╸   ┗━╸┗━┛┗━╸╹╹ ╹ ╹

snippet eslint-disable "Disable ESLint" b
/* eslint-disable ${1:rule} */
${VISUAL}$0
/* eslint-enable */
endsnippet

snippet eslint-disable-line "Disable ESLint for current line" w
// eslint-disable-line ${1:rule}
endsnippet

snippet eslint-disable-next-line "Disable ESLint disable next line" b
// eslint-disable-next-line ${1:rule}
endsnippet

#  ╺┳┓╻┏━┓┏━┓┏┓ ╻  ┏━╸   ┏━┓┏━┓┏━╸╺┳╸╺┳╸╻┏━╸┏━┓
#   ┃┃┃┗━┓┣━┫┣┻┓┃  ┣╸    ┣━┛┣┳┛┣╸  ┃  ┃ ┃┣╸ ┣┳┛
#  ╺┻┛╹┗━┛╹ ╹┗━┛┗━╸┗━╸   ╹  ╹┗╸┗━╸ ╹  ╹ ╹┗━╸╹┗╸

snippet prettier-ignore "Ignore Prettier formatting for next block" b
// prettier-ignore
endsnippet

#  ┏━╸╻ ╻┏┓╻┏━╸╺┳╸╻┏━┓┏┓╻┏━┓
#  ┣╸ ┃ ┃┃┗┫┃   ┃ ┃┃ ┃┃┗┫┗━┓
#  ╹  ┗━┛╹ ╹┗━╸ ╹ ╹┗━┛╹ ╹┗━┛

snippet fn "Function declaration" w
function ${1:name}(${2:arguments}) {
	${VISUAL}$0
}
endsnippet

snippet fna "Anonymous function" w
function(${1:arguments}) {
	${VISUAL}$0
}
endsnippet

snippet fnr "Rocket function" w
(${1:arguments}) => {
	${VISUAL}$0
}
endsnippet

snippet fns "Async function declaration" w
async function ${1:name}(${2:arguments}) {
	${VISUAL}$0
}
endsnippet

snippet fnsa "Async anonymous function" w
async function(${1:arguments}) {
	${VISUAL}$0
}
endsnippet

snippet fnsr "Async rocket function" w
async (${1:arguments}) => {
	${VISUAL}$0
}
endsnippet

#  ╺┳╸┏━╸┏━┓╺┳╸╻┏┓╻┏━╸
#   ┃ ┣╸ ┗━┓ ┃ ┃┃┗┫┃╺┓
#   ╹ ┗━╸┗━┛ ╹ ╹╹ ╹┗━┛

snippet before "Test before block" b
before(() => {
	${VISUAL}$0
})
endsnippet

snippet beforeAll "Test beforeAll block" b
beforeAll(() => {
	${VISUAL}$0
})
endsnippet

snippet beforeEach "Test beforeEach block" b
beforeEach(() => {
	${VISUAL}$0
})
endsnippet

snippet after "Test after block" b
after(() => {
	${VISUAL}$0
})
endsnippet

snippet afterAll "Test afterAll block" b
afterAll(() => {
	${VISUAL}$0
})
endsnippet

snippet afterEach "Test afterEach block" b
afterEach(() => {
	${VISUAL}$0
})
endsnippet

snippet describe "Test describe block" b
describe('${1:context}', () => {
	${VISUAL}$0
})
endsnippet

snippet it "Test it block" b
it('${1:action}', () => {
	${VISUAL}$0
})
endsnippet

snippet test "Test test block" b
test('${1:action}', () => {
	${VISUAL}$0
})
endsnippet

snippet When "Test When block" b
When('${1:when}', () => {
	${VISUAL}$0
})
endsnippet

snippet Then "Test Then block" b
When('${1:then}', () => {
	${VISUAL}$0
})
endsnippet

snippet And "Test And block" b
When('${1:and}', () => {
	${VISUAL}$0
})
endsnippet

snippet expect "Test expect statement" b
expect(${1:subject}).to${VISUAL}$0
endsnippet

#  ┏┳┓╻┏━┓┏━╸
#  ┃┃┃┃┗━┓┃
#  ╹ ╹╹┗━┛┗━╸

snippet import "Import module" b
import ${1:name} from "${2:path}"
endsnippet

snippet if "If statement" b
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet tern "Ternary operator" b
${1:condition} ? ${2} : ${3}
endsnippet


snippet switch "Switch statement" b
switch (${VISUAL}${1:expression}) {
	case '${2}':
		${3}
		break
	${0}
	default:
		${4}
}
endsnippet

snippet case "Switch case" b
case '${VISUAL}${1}':
	${VISUAL}$0
	break
endsnippet

#  ╻ ╻┏━┓┏━┓╻┏━┓┏┓ ╻  ┏━╸┏━┓
#  ┃┏┛┣━┫┣┳┛┃┣━┫┣┻┓┃  ┣╸ ┗━┓
#  ┗┛ ╹ ╹╹┗╸╹╹ ╹┗━┛┗━╸┗━╸┗━┛

snippet vc "Const variable" b
const ${1:name} = ${VISUAL}${0:value}
endsnippet

snippet vl "Let variable" b
let ${1:name} = ${VISUAL}${0:value}
endsnippet

snippet vv "Var variable" b
let ${1:name} = ${VISUAL}${0:value}
endsnippet
