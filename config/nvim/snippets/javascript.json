{
  "commentCompactJsDoc": { "prefix": "**!", "body": "/** $0 */" },
  "commentJsDoc": { "prefix": "**", "body": ["/**", " * $0", " */"] },
  "commentLine": {
    "prefix": "--",
    "body": "// ----------------------------------------------------------------------------"
  },
  "conditionElse": { "prefix": "else", "body": ["else {", "\t$0", "}"] },
  "conditionElseIf": {
    "prefix": "elseif",
    "body": ["else if (${1:condition}) {", "\t$0", "}"]
  },
  "conditionIf": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"]
  },
  "consoleAsset": {
    "prefix": "ca",
    "body": "console.assert($1:assertion, $0);"
  },
  "consoleDir": {
    "prefix": "cd",
    "body": "console.dir($0);"
  },
  "consoleError": {
    "prefix": "ce",
    "body": "console.error($0);"
  },
  "consoleLog": {
    "prefix": "cl",
    "body": "console.log($0);"
  },
  "consoleLogContext": {
    "prefix": "clc",
    "body": "console.log('$TM_FILENAME:$TM_LINE_NUMBER ==>', $0);"
  },
  "consoleTable": {
    "prefix": "ct",
    "body": "console.table($0);"
  },
  "consoleVariable": {
    "prefix": "cv",
    "body": "console.log('$0:', $0);"
  },
  "consoleWarn": {
    "prefix": "cw",
    "body": "console.warn($0);"
  },
  "dependencyExport": {
    "prefix": "export",
    "body": "export ${1:name} from '${0:path}';"
  },
  "dependencyImport": {
    "prefix": "import",
    "body": "import ${1:name} from '${0:path}';"
  },
  "dependencyRequire": {
    "prefix": "require",
    "body": "const ${1:name} = require('${0:path}');"
  },
  "eslintDisable": {
    "prefix": "eslint-disable",
    "body": ["/* eslint-disable ${1:rule} */", "$0", "/* eslint-enable */"]
  },
  "eslintDisableLine": {
    "prefix": "eslint-disable-line",
    "body": "// eslint-disable-line ${0:rule}"
  },
  "eslintDisableNextLine": {
    "prefix": "eslint-disable-next-line",
    "body": "// eslint-disable-next-line ${0:rule}"
  },
  "every": {
    "prefix": "every",
    "body": "every((${1:item}) => $0);"
  },
  "filter": {
    "prefix": "filter",
    "body": "filter((${1:item}) => $0);"
  },
  "find": {
    "prefix": "find",
    "body": "find((${1:item}) => $0);"
  },
  "foreach": {
    "prefix": "forEach",
    "body": "forEach((${1:item}) => $0);"
  },
  "includes": {
    "prefix": "includes",
    "body": "includes((${1:item}) => $0);"
  },
  "map": { "prefix": "map", "body": "map((${1:item}) => $0);" },
  "reduce": {
    "prefix": "reduce",
    "body": "reduce((${1:acc}, ${2:current}) => $0, ${3:initialValue});"
  },
  "some": {
    "prefix": "some",
    "body": "some((${1:item}) => $0);"
  },
  "function": {
    "prefix": "fn",
    "body": ["function ${1:name}(${2:arguments}) {", "\t$0", "}"]
  },
  "functionRocket": { "prefix": "fr", "body": "(${1:arguments}) => $0" },
  "iife": {
    "prefix": "iife",
    "body": ["(function (${1:arguments}) {", "\t$0", "})(${2:sync});"]
  },
  "loopFor": {
    "prefix": "for",
    "body": [
      "for (let ${1:idx} = 0, ${2:length} = ${3:iterable}.length; ${1:idx} < ${2:length}; ${1:idx}++) {",
      "\t$0",
      "}"
    ]
  },
  "loopForIn": {
    "prefix": "forin",
    "body": ["for (const ${1:key} in ${2:source}) {", "\t$0", "}"]
  },
  "loopForOf": {
    "prefix": "forof",
    "body": ["for (const ${1:item} of ${2:source}) {", "\t$0", "}"]
  },
  "loopWhile": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"]
  },
  "prettierDisable": {
    "prefix": "prettier-ignore",
    "body": "// prettier-ignore"
  },
  "shebang": { "prefix": "#!", "body": "#!/usr/bin/env node" },
  "sleep": {
    "prefix": "sleep",
    "body": "await new Promise((resolve) => setTimeout(resolve, $0))"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:value}) {",
      "\tcase ${2:match}:",
      "\t\t$0",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ]
  },
  "switchCase": {
    "prefix": "case",
    "body": ["case ${1:match}:", "\t$0", "\tbreak;"]
  },
  "testAfter": {
    "prefix": "after",
    "body": ["after(() => {", "\t$0", "});"]
  },
  "testAfterAll": {
    "prefix": "afterAll",
    "body": ["afterAll(() => {", "\t$0", "});"]
  },
  "testAfterEach": {
    "prefix": "afterEach",
    "body": ["afterEach(() => {", "\t$0", "});"]
  },
  "testBefore": {
    "prefix": "before",
    "body": ["before(() => {", "\t$0", "});"]
  },
  "testBeforeAll": {
    "prefix": "beforeAll",
    "body": ["beforeAll(() => {", "\t$0", "});"]
  },
  "testBeforeEach": {
    "prefix": "beforeEach",
    "body": ["beforeEach(() => {", "\t$0", "});"]
  },
  "testDescribe": {
    "prefix": "describe",
    "body": ["describe('${1:description}', () => {", "\t$0", "});"]
  },
  "testExpect": { "prefix": "expect", "body": "expect(${1:subject}).to$0" },
  "testIt": {
    "prefix": "it",
    "body": ["it('${1:description}', () => {", "\t$0", "});"]
  },
  "tryCatch": {
    "prefix": "trycatch",
    "body": "try {\n\t${0}\n} catch (${1:error}) {\n\t\n}"
  },
  "tryFinally": {
    "prefix": "tryfinally",
    "body": [
      "try {",
      "\t$0",
      "} finally {",
      "",
      "}"
    ]
  },
  "tryCatchFinally": {
    "prefix": "trycatchfinally",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "",
      "} finally {",
      "",
      "}"
    ]
  }
}
