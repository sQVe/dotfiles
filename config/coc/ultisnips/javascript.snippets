extends 30secondsofcode, react

#  ┏━╸┏━┓┏┳┓┏┳┓┏━╸┏┓╻╺┳╸
#  ┃  ┃ ┃┃┃┃┃┃┃┣╸ ┃┗┫ ┃
#  ┗━╸┗━┛╹ ╹╹ ╹┗━╸╹ ╹ ╹

snippet #! "Shebang" b
#!/usr/bin/env node
endsnippet

snippet ** "JsDoc Comment" b
/**
 * $0
 */
endsnippet

snippet **! "Compact JsDoc Comment" b
/** $0 */
endsnippet


#  ╻┏┳┓┏━┓┏━┓┏━┓╺┳╸
#  ┃┃┃┃┣━┛┃ ┃┣┳┛ ┃
#  ╹╹ ╹╹  ┗━┛╹┗╸ ╹

snippet imp "import module from 'path'" b
import ${1:name} from '${0:path}'
endsnippet

snippet imn "import 'path'" b
import '${0:path}'
endsnippet

snippet imd "import { name } from 'path'" b
import { $1 } from '${0:path}'
endsnippet

snippet ime "import * as name from 'path'" b
import * as ${1:name} from '${0:path}'
endsnippet

snippet ima "import { name as newName } from 'path'" b
import { $1 as ${2:alias} } from '${0:path}'
endsnippet


#  ┏━╸╻ ╻┏━┓┏━┓┏━┓╺┳╸
#  ┣╸ ┏╋┛┣━┛┃ ┃┣┳┛ ┃
#  ┗━╸╹ ╹╹  ┗━┛╹┗╸ ╹

snippet exp "export default module" b
export default $0
endsnippet

snippet exd "export { name } from 'path'" b
export { $1 } from '${0:path}'
endsnippet

snippet exa "export { name as newName } from 'path'" b
export { $1 as ${2:alias}} } from '${0:path}'
endsnippet


#  ┏━╸┏━┓┏┓╻┏━┓┏━┓╻  ┏━╸
#  ┃  ┃ ┃┃┗┫┗━┓┃ ┃┃  ┣╸
#  ┗━╸┗━┛╹ ╹┗━┛┗━┛┗━╸┗━╸

snippet ca "console.assert" w
console.assert(${0:expression}, ${1:value})
endsnippet

snippet cc "console.clear" w
console.clear()
endsnippet

snippet cd "console.dir" w
console.dir(${0:value})
endsnippet

snippet ce "console.error" w
console.error(${0:value})
endsnippet

snippet cec "console.error with file and line context" w
console.error('`!v expand("%:t")`:`!v line(".")` ==>'', ${0:value})
endsnippet

snippet cg "console.group" w
console.group()
endsnippet

snippet cgc "console.groupCollapsed" w
console.groupCollapsed()
endsnippet

snippet cge "console.groupEnd" w
console.groupEnd()
endsnippet

snippet cl "console.log" w
console.log(${0:value})
endsnippet

snippet clc "console.log with file and line context" w
console.log('`!v expand("%:t")`:`!v line(".")` ==>', ${0:value})
endsnippet

snippet ci "console.info" w
console.info(${0:value})
endsnippet

snippet cic "console.info with file and line context" w
console.info('`!v expand("%:t")`:`!v line(".")`' ==>', ${0:value})
endsnippet

snippet ct "console.table" w
console.table(${0:value})
endsnippet

snippet ctr "console.trace" w
console.trace(${0:value})
endsnippet

snippet cw "console.warn" w
console.warn(${0:value})
endsnippet

snippet cwc "console.warn with file and line context" w
console.warn('`!v expand("%:t")`:`!v line(".")` ==>'', ${0:value})
endsnippet


#  ╺┳┓╻┏━┓┏━┓┏┓ ╻  ┏━╸   ┏━╸┏━┓╻  ╻┏┓╻╺┳╸
#   ┃┃┃┗━┓┣━┫┣┻┓┃  ┣╸    ┣╸ ┗━┓┃  ┃┃┗┫ ┃
#  ╺┻┛╹┗━┛╹ ╹┗━┛┗━╸┗━╸   ┗━╸┗━┛┗━╸╹╹ ╹ ╹

snippet eslint-disable "Disable ESLint" b
/* eslint-disable ${1:rule} */
$0
/* eslint-enable */
endsnippet

snippet eslint-disable-line "Disable ESLint for current line" w
// eslint-disable-line ${0:rule}
endsnippet

snippet eslint-disable-next-line "Disable ESLint disable next line" b
// eslint-disable-next-line ${0:rule}
endsnippet


#  ╺┳┓╻┏━┓┏━┓┏┓ ╻  ┏━╸   ┏━┓┏━┓┏━╸╺┳╸╺┳╸╻┏━╸┏━┓
#   ┃┃┃┗━┓┣━┫┣┻┓┃  ┣╸    ┣━┛┣┳┛┣╸  ┃  ┃ ┃┣╸ ┣┳┛
#  ╺┻┛╹┗━┛╹ ╹┗━┛┗━╸┗━╸   ╹  ╹┗╸┗━╸ ╹  ╹ ╹┗━╸╹┗╸

snippet prettier-ignore "Ignore Prettier formatting for next block" b
// prettier-ignore
endsnippet


#  ┏━╸╻ ╻┏┓╻┏━╸╺┳╸╻┏━┓┏┓╻┏━┓
#  ┣╸ ┃ ┃┃┗┫┃   ┃ ┃┃ ┃┃┗┫┗━┓
#  ╹  ┗━┛╹ ╹┗━╸ ╹ ╹┗━┛╹ ╹┗━┛

snippet fn "function name() { ... }" w
function ${1:name}(${2:arguments}) {
	$0
}
endsnippet

snippet fna "function () { ... } " w
function(${1:arguments}) {
	$0
}
endsnippet

snippet fnr "() => { ... }" w
(${1:arguments}) => {
	$0
}
endsnippet

snippet fns "async function name() { ... }" w
async function ${1:name}(${2:arguments}) {
	$0
}
endsnippet

snippet fnsa "async function() { ... }" w
async function(${1:arguments}) {
	$0
}
endsnippet

snippet fnsr "async () => { ... }" w
async (${1:arguments}) => {
	$0
}
endsnippet


#  ╺┳╸┏━╸┏━┓╺┳╸╻┏┓╻┏━╸
#   ┃ ┣╸ ┗━┓ ┃ ┃┃┗┫┃╺┓
#   ╹ ┗━╸┗━┛ ╹ ╹╹ ╹┗━┛

snippet before "before(() => { ... })" b
before(() => {
	$0
})
endsnippet

snippet beforeAll "beforeAll(() => { ... })" b
beforeAll(() => {
	$0
})
endsnippet

snippet beforeEach "beforeEach(() => { ... })" b
beforeEach(() => {
	$0
})
endsnippet

snippet after "after(() => { ... }" b
after(() => {
	$0
})
endsnippet

snippet afterAll "afterAll(() => { ... })" b
afterAll(() => {
	$0
})
endsnippet

snippet afterEach "afterEach(() => { ... })" b
afterEach(() => {
	$0
})
endsnippet

snippet describe "describe(context, () => { ... })" b
describe('${1:context}', () => {
	$0
})
endsnippet

snippet it "it(action, () => { ... })" b
it('${1:action}', () => {
	$0
})
endsnippet

snippet test "test(action, () => { ... })" b
test('${1:action}', () => {
	$0
})
endsnippet

snippet When "When(when, () => { ... })" b
When('${1:when}', () => {
	$0
})
endsnippet

snippet Then "Then(then, () => { ... })" b
Then('${1:then}', () => {
	$0
})
endsnippet

snippet And "And(and,() => { ... })" b
And('${1:and}', () => {
	$0
})
endsnippet

snippet expect "expect(subject).to" b
expect(${1:subject}).to$0
endsnippet


#  ┏┳┓╻┏━┓┏━╸
#  ┃┃┃┃┗━┓┃
#  ╹ ╹╹┗━┛┗━╸

snippet forOf "for (prop of object) { ... }" b
for (let ${2:prop} of ${1:object}) {
	$0
}
endsnippet

snippet forIn "for (prop in object) { ... }" b
for (let ${2:prop} in ${1:object}) {
	$0
}
endsnippet

snippet if "if (condition) { ... }" b
if (${1:condition}) {
	$0
}
endsnippet

snippet tern "condition ? then : else" b
${1:condition} ? ${2} : ${3}
endsnippet


snippet switch "switch (expression) { ... }" b
switch (${1:expression}) {
	case '${2}':
		${3}
		break
	${0}
	default:
		${4}
}
endsnippet

snippet case "case ... break" b
case '${1}':
	$0
	break
endsnippet


#  ╻ ╻┏━┓┏━┓╻┏━┓┏┓ ╻  ┏━╸┏━┓
#  ┃┏┛┣━┫┣┳┛┃┣━┫┣┻┓┃  ┣╸ ┗━┓
#  ┗┛ ╹ ╹╹┗╸╹╹ ╹┗━┛┗━╸┗━╸┗━┛

snippet vc "const" b
const ${1:name} = ${0:value}
endsnippet

snippet vl "let" b
let ${1:name} = ${0:value}
endsnippet

snippet vv "var" b
var ${1:name} = ${0:value}
endsnippet
