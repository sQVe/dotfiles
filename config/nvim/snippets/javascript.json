{
  "CommentCompactJsDoc": { "prefix": "**!", "body": "/** $0 */" },
  "CommentJsDoc": { "prefix": "**", "body": ["/**", " * $0", " */"] },
  "CommentLine": {
    "prefix": "--",
    "body": "// ----------------------------------------------------------------------------"
  },
  "ConditionElse": { "prefix": "else", "body": ["else {", "\t$0", "}"] },
  "ConditionElseIf": {
    "prefix": "elseif",
    "body": ["else if (${1:condition}) {", "\t$0", "}"]
  },
  "ConditionIf": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"]
  },
  "ConsoleAsset": {
    "prefix": "ca",
    "body": "console.assert($1:assertion, $0);"
  },
  "ConsoleDir": {
    "prefix": "cd",
    "body": "console.dir($0);"
  },
  "ConsoleError": {
    "prefix": "ce",
    "body": "console.error($0);"
  },
  "ConsoleLog": {
    "prefix": "cl",
    "body": "console.log($0);"
  },
  "ConsoleLogContext": {
    "prefix": "clc",
    "body": "console.log('$TM_FILENAME:$TM_LINE_NUMBER ==>', $0);"
  },
  "ConsoleTable": {
    "prefix": "ct",
    "body": "console.table($0);"
  },
  "ConsoleVariable": {
    "prefix": "cv",
    "body": "console.log('$0:', $0);"
  },
  "ConsoleWarn": {
    "prefix": "cw",
    "body": "console.warn($0);"
  },
  "DependencyExport": {
    "prefix": "export",
    "body": "export ${1:name} from '${0:path}';"
  },
  "DependencyImport": {
    "prefix": "import",
    "body": "import ${1:name} from '${0:path}';"
  },
  "DependencyRequire": {
    "prefix": "require",
    "body": "const ${1:name} = require('${0:path}');"
  },
  "ESLintDisable": {
    "prefix": "eslint-disable",
    "body": ["/* eslint-disable ${1:rule} */", "$0", "/* eslint-enable */"]
  },
  "ESLintDisableLine": {
    "prefix": "eslint-disable-line",
    "body": "// eslint-disable-line ${0:rule}"
  },
  "ESLintDisableNextLine": {
    "prefix": "eslint-disable-next-line",
    "body": "// eslint-disable-next-line ${0:rule}"
  },
  "FPEvery": {
    "prefix": "every",
    "body": "every((${1:item}) => $0);"
  },
  "FPFilter": {
    "prefix": "filter",
    "body": "filter((${1:item}) => $0);"
  },
  "FPFind": {
    "prefix": "find",
    "body": "find((${1:item}) => $0);"
  },
  "FPForEach": {
    "prefix": "forEach",
    "body": "forEach((${1:item}) => $0);"
  },
  "FPIncludes": {
    "prefix": "includes",
    "body": "includes((${1:item}) => $0);"
  },
  "FPMap": { "prefix": "map", "body": "map((${1:item}) => $0);" },
  "FPReduce": {
    "prefix": "reduce",
    "body": "reduce((${1:acc}, ${2:current}) => $0, ${3:initialValue});"
  },
  "FPSome": {
    "prefix": "some",
    "body": "some((${1:item}) => $0);"
  },
  "Function": {
    "prefix": "fn",
    "body": ["function ${1:name}(${2:arguments}) {", "\t$0", "}"]
  },
  "FunctionRocket": { "prefix": "fr", "body": "(${1:arguments}) => $0" },
  "IIFE": {
    "prefix": "iife",
    "body": ["(function (${1:arguments}) {", "\t$0", "})(${2:sync});"]
  },
  "LoopFor": {
    "prefix": "for",
    "body": [
      "for (let ${1:idx} = 0, ${2:length} = ${3:iterable}.length; ${1:idx} < ${2:length}; ${1:idx}++) {",
      "\t$0",
      "}"
    ]
  },
  "LoopForIn": {
    "prefix": "forin",
    "body": ["for (const ${1:key} in ${2:source}) {", "\t$0", "}"]
  },
  "LoopForOf": {
    "prefix": "forof",
    "body": ["for (const ${1:item} of ${2:source}) {", "\t$0", "}"]
  },
  "LoopWhile": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"]
  },
  "PrettierDisable": {
    "prefix": "prettier-ignore",
    "body": "// prettier-ignore"
  },
  "Shebang": { "prefix": "#!", "body": "#!/usr/bin/env node" },
  "Sleep": {
    "prefix": "sleep",
    "body": "await new Promise((resolve) => setTimeout(resolve, $0))"
  },
  "Switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:value}) {",
      "\tcase ${2:match}:",
      "\t\t$0",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "SwitchCase": {
    "prefix": "case",
    "body": ["case ${1:match}:", "\t$0", "\tbreak;"],
    "description": "Switch Statement"
  },
  "TestAfter": {
    "prefix": "after",
    "body": ["after(() => {", "\t$0", "});"]
  },
  "TestAfterAll": {
    "prefix": "afterAll",
    "body": ["afterAll(() => {", "\t$0", "});"]
  },
  "TestAfterEach": {
    "prefix": "afterEach",
    "body": ["afterEach(() => {", "\t$0", "});"]
  },
  "TestBefore": {
    "prefix": "before",
    "body": ["before(() => {", "\t$0", "});"]
  },
  "TestBeforeAll": {
    "prefix": "beforeAll",
    "body": ["beforeAll(() => {", "\t$0", "});"]
  },
  "TestBeforeEach": {
    "prefix": "beforeEach",
    "body": ["beforeEach(() => {", "\t$0", "});"]
  },
  "TestDescribe": {
    "prefix": "describe",
    "body": ["describe('${1:description}', () => {", "\t$0", "});"]
  },
  "TestExpect": { "prefix": "expect", "body": "expect(${1:subject}).to$0" },
  "TestIt": {
    "prefix": "it",
    "body": ["it('${1:description}', () => {", "\t$0", "});"]
  },
  "Try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:err}) {",
      "\t// TODO: Handle $1.",
      "}"
    ]
  },
  "TryFinally": {
    "prefix": "tryfinally",
    "body": [
      "try {",
      "\t$0",
      "} finally {",
      "\t// TODO: Handle finally clause.",
      "}"
    ]
  },
  "TryCatchFinally": {
    "prefix": "trycatchfinally",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:err}) {",
      "\t// TODO: Handle $1.",
      "} finally {",
      "\t// TODO: Handle finally clause.",
      "}"
    ]
  }
}
